import React, { useState, useEffect, useCallback, useContext, useMemo, createContext } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';
import { getFirestore, doc, setDoc, onSnapshot } from 'firebase/firestore';
import { Shield, Zap, ListChecks, Activity, Loader2, Users, AlertTriangle, CheckCircle, Clock, PlusCircle, Trash2, Edit, Brain, ArrowRight } from 'lucide-react';

// --- Configuration and Utilities ---

// Use global variables provided by the Canvas environment
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : null;
const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

// Gemini API Configuration
const GEMINI_MODEL = 'gemini-2.5-flash-preview-09-2025';
const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/${GEMINI_MODEL}:generateContent?key=`;
const API_KEY = ""; // Canvas provides this dynamically

// Firestore Document Reference Path for the single, public, shared community plan
const getPlanDocRef = (db) => {
  if (!db) return null;
  return doc(db, `artifacts/${appId}/public/data/resilience_plans`, 'main_community_plan');
};

const generateId = () => crypto.randomUUID();

const DEFAULT_PLAN = {
  communityName: "Unnamed Community",
  risks: [], 
  actions: [],
};

// --- 1. Resilience Context Setup (with Gemini Integration) ---
const ResilienceContext = createContext();

const ResilienceProvider = ({ children }) => {
  const [db, setDb] = useState(null);
  const [auth, setAuth] = useState(null);
  const [userId, setUserId] = useState(null);
  const [plan, setPlan] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Initialization and Authentication (Runs Once)
  useEffect(() => {
    if (!firebaseConfig) {
      setError("Firebase configuration is missing.");
      setLoading(false);
      return;
    }

    try {
      const app = initializeApp(firebaseConfig);
      const _auth = getAuth(app);
      const _db = getFirestore(app);

      const signInUser = async () => {
        if (initialAuthToken) {
          await signInWithCustomToken(_auth, initialAuthToken);
        } else {
          await signInAnonymously(_auth);
        }
      };

      signInUser().catch((e) => {
        console.error("Firebase Sign-in Failed:", e);
        setError("Authentication failed. Check security rules or console.");
        setLoading(false);
      });

      const unsubscribe = onAuthStateChanged(_auth, (user) => {
        if (user) {
          setUserId(user.uid);
          setDb(_db);
          setAuth(_auth);
        } else {
            setLoading(false);
        }
      });
      
      return () => unsubscribe();

    } catch (e) {
      console.error("Firebase Initialization Failed:", e);
      setError("Failed to initialize Firebase services.");
      setLoading(false);
    }
  }, []);

  // Real-time Data Listener (Runs when DB/User are ready)
  useEffect(() => {
    if (!db || !userId) return;

    const planRef = getPlanDocRef(db);
    
    const unsubscribe = onSnapshot(planRef, (docSnap) => {
      setLoading(false);
      if (docSnap.exists()) {
        const data = docSnap.data();
        setPlan({
          ...data,
          risks: data.risks || [],
          actions: data.actions || [],
        });
      } else {
        setPlan(null); // Plan needs setup
      }
    }, (e) => {
      console.error("Firestore Snapshot Error:", e);
      setError("Could not load community plan data.");
      setLoading(false);
    });

    return () => unsubscribe();
  }, [db, userId]);

  // Core Function to save the entire plan document
  const savePlan = useCallback(async (newPlan) => {
    if (!db || !userId) {
      setError("System not ready (DB/Auth missing).");
      return;
    }
    setLoading(true);
    setError(null);

    const planRef = getPlanDocRef(db);

    try {
      await setDoc(planRef, {
        ...newPlan,
        lastUpdated: new Date().toISOString(),
      }, { merge: true });
      
    } catch (e) {
      console.error("Failed to save plan:", e);
      setError("Failed to save plan changes. Data not synchronized.");
      setLoading(false);
    }
  }, [db, userId]);

  // Function to Generate Risks using Gemini API
  const generateRiskSuggestions = useCallback(async (communityName) => {
    const systemInstruction = "You are an AI expert in urban planning and disaster management. Your task is to analyze a community name and suggest 3 common resilience risk factors for a community like it. Output the result ONLY as a JSON array matching the provided schema.";
    const userQuery = `The community name is: ${communityName}. Suggest 3 common risks, prioritizing risks that might be overlooked.`;

    const responseSchema = {
        type: "ARRAY",
        items: {
            type: "OBJECT",
            properties: {
                "name": { "type": "STRING", "description": "Concise name of the risk (e.g., Flash Flooding)" },
                "type": { "type": "STRING", "description": "Category (e.g., Natural Hazard, Infrastructure Failure)" },
                "severity": { "type": "INTEGER", "description": "Severity level from 1 (Low) to 5 (Critical). Must be an integer." },
                "description": { "type": "STRING", "description": "A short, actionable description of why this is a risk." }
            },
            required: ["name", "type", "severity", "description"]
        }
    };
    
    const payload = {
        contents: [{ parts: [{ text: userQuery }] }],
        systemInstruction: { parts: [{ text: systemInstruction }] },
        generationConfig: {
            responseMimeType: "application/json",
            responseSchema: responseSchema
        }
    };

    let attempts = 0;
    const maxAttempts = 3;
    while (attempts < maxAttempts) {
        try {
            const response = await fetch(GEMINI_API_URL + API_KEY, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

            const result = await response.json();
            const jsonText = result.candidates?.[0]?.content?.parts?.[0]?.text;
            
            if (jsonText) {
                // Parse the JSON array and ensure severity is a number
                const suggestions = JSON.parse(jsonText).map(s => ({
                    ...s,
                    severity: Math.min(5, Math.max(1, parseInt(s.severity, 10) || 3)) // Enforce 1-5 integer range
                }));
                return suggestions;
            }
            throw new Error("Invalid response format from AI.");

        } catch (e) {
            console.warn(`Attempt ${attempts + 1} failed:`, e);
            attempts++;
            if (attempts < maxAttempts) {
                await new Promise(resolve => setTimeout(resolve, 2 ** attempts * 1000)); // Exponential backoff
            } else {
                throw new Error("Failed to generate risks after multiple attempts.");
            }
        }
    }
  }, []); // Empty dependency array as API details are constant


  // Context Value
  const contextValue = {
    plan,
    userId,
    loading,
    error,
    savePlan,
    dbReady: !!db && !!userId,
    generateRiskSuggestions, // Added new function
  };

  return (
    <ResilienceContext.Provider value={contextValue}>
      {children}
    </ResilienceContext.Provider>
  );
};

// Custom Hook to consume the Resilience Context
const useResilience = () => {
  return useContext(ResilienceContext);
};

// --- 2. Shared Components & Hooks ---

const LoadingSpinner = () => (
    <div className="flex justify-center items-center h-40">
      <Loader2 className="animate-spin text-indigo-500 w-8 h-8 mr-2" />
      <p className="text-gray-600 font-medium">Synchronizing plan data in real-time...</p>
    </div>
);

const Header = ({ view, setView }) => {
    const { plan } = useResilience();
    return (
        <header className="bg-white shadow-lg sticky top-0 z-20">
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-3 flex flex-wrap justify-between items-center">
                <h1 className="text-xl sm:text-2xl font-extrabold text-indigo-700 flex items-center">
                    <Shield className="w-6 h-6 mr-2 text-indigo-500" />
                    Resilience Hub
                </h1>
                <nav className="flex space-x-2 sm:space-x-4 mt-2 sm:mt-0">
                    {['dashboard', 'risks', 'actions'].map((v) => (
                        <button
                            key={v}
                            onClick={() => setView(v)}
                            className={`px-3 py-1.5 text-sm font-medium rounded-full transition-colors duration-200 ${
                                view === v ? 'bg-indigo-600 text-white shadow-md' : 'text-gray-700 hover:bg-indigo-50'
                            }`}
                        >
                            {v.charAt(0).toUpperCase() + v.slice(1)} ({v === 'risks' ? plan?.risks.length || 0 : v === 'actions' ? plan?.actions.length || 0 : ''})
                        </button>
                    ))}
                </nav>
            </div>
        </header>
    );
};

const PlanSetupModal = ({ onSetup, userId }) => {
    const [communityName, setCommunityName] = useState('');
    const [nameError, setNameError] = useState('');
    const { loading } = useResilience();

    const handleSetup = () => {
        if (communityName.trim().length < 3) {
            setNameError("Please enter a valid community name.");
            return;
        }
        setNameError('');
        onSetup(communityName.trim());
    };

    return (
        <div className="fixed inset-0 bg-gray-900 bg-opacity-80 flex items-center justify-center p-4 z-50 transition-opacity duration-300">
            <div className="bg-white rounded-2xl shadow-2xl p-8 w-full max-w-lg transform scale-100 transition-transform duration-300">
                <h2 className="text-3xl font-bold text-indigo-700 mb-4 flex items-center border-b pb-2">
                    <Shield className="w-6 h-6 mr-3" />
                    Initialize Community Plan
                </h2>
                <p className="text-gray-600 mb-6">
                    This is a shared, real-time tool for collaboration. Your plan will be accessible to anyone using this App ID.
                </p>
                <div className="mb-4">
                    <label htmlFor="communityName" className="block text-sm font-medium text-gray-700 mb-1">
                        Official Community Name
                    </label>
                    <input
                        id="communityName"
                        type="text"
                        value={communityName}
                        onChange={(e) => {
                            setCommunityName(e.target.value);
                            setNameError('');
                        }}
                        placeholder="e.g., Coastal Pines Neighborhood Association"
                        className={`w-full p-3 border ${nameError ? 'border-red-500' : 'border-gray-300'} rounded-xl focus:ring-indigo-500 focus:border-indigo-500 shadow-sm`}
                    />
                    {nameError && <p className="text-red-500 text-xs mt-1">{nameError}</p>}
                </div>
                <button
                    onClick={handleSetup}
                    disabled={loading}
                    className="w-full bg-indigo-600 text-white font-semibold py-3 rounded-xl hover:bg-indigo-700 transition duration-150 shadow-lg disabled:bg-indigo-400 flex items-center justify-center mt-6"
                >
                    {loading ? <Loader2 className="animate-spin w-5 h-5 mr-2" /> : 'Create Shared Resilience Plan'}
                </button>
                <p className="mt-4 text-xs text-gray-500 text-center">
                    Current App ID: <span className="font-mono text-xs bg-gray-100 p-1 rounded-md">{appId}</span> | User: {userId ? `ID ${userId.substring(0, 8)}...` : 'Authenticating'}
                </p>
            </div>
        </div>
    );
};

// --- 3. View Components ---

const RiskGapAlerts = ({ riskGaps, setView }) => {
    if (riskGaps.length === 0) return null;

    return (
        <div className="bg-yellow-100 border-l-4 border-yellow-500 p-6 rounded-2xl shadow-xl">
            <h3 className="text-xl font-bold text-yellow-800 mb-3 flex items-center">
                <AlertTriangle className="w-6 h-6 mr-2 text-yellow-600" />
                Action Gaps Alert!
            </h3>
            <p className="text-yellow-700 mb-4">
                You have **{riskGaps.length} identified risk(s)** that currently have no corresponding actions assigned to them.
                These risks represent potential weak points in your community's resilience plan.
            </p>
            <ul className="list-disc list-inside space-y-2 text-yellow-800 ml-4">
                {riskGaps.slice(0, 3).map(risk => (
                    <li key={risk.id}>
                        <span className="font-semibold">{risk.name}</span> (Severity: {risk.severity})
                    </li>
                ))}
                {riskGaps.length > 3 && <li>...and {riskGaps.length - 3} more gaps.</li>}
            </ul>
            <button
                onClick={() => setView('risks')}
                className="mt-4 bg-yellow-500 text-white font-semibold py-2 px-4 rounded-xl hover:bg-yellow-600 transition shadow-md flex items-center"
            >
                Review Risks and Add Actions
                <ArrowRight className="w-4 h-4 ml-2" />
            </button>
        </div>
    );
};


const DashboardView = ({ setView }) => {
    const { plan } = useResilience();

    const resilienceMetrics = useMemo(() => {
        if (!plan) return { totalRisks: 0, completedActions: 0, totalActions: 0, percentage: 0, riskGaps: [] };
        
        const totalRisks = plan.risks.length;
        const totalActions = plan.actions.length;
        const completedActions = plan.actions.filter(a => a.status === 'Completed').length;

        // Calculate Risk Gaps
        const actionRiskIds = new Set(plan.actions.map(a => a.relatedRisk).filter(id => id));
        const riskGaps = plan.risks.filter(r => !actionRiskIds.has(r.id));
        
        let percentage = 0;
        if (totalActions > 0) {
            percentage = Math.round((completedActions / totalActions) * 100);
        } else if (totalRisks > 0) {
             // If risks exist but no actions, score is lower
             percentage = 0; 
        } else {
             // If no risks and no actions, assume ready
             percentage = 100;
        }

        return { totalRisks, completedActions, totalActions, percentage, riskGaps };
    }, [plan]);

    const StatCard = ({ Icon, title, value, color, iconColor }) => (
        <div className={`p-6 rounded-2xl shadow-xl ${color} flex flex-col items-start space-y-2 border-t-4 border-b-2 border-opacity-50 ${iconColor.replace('text', 'border')}`}>
            <div className={`p-3 rounded-full ${iconColor} bg-white shadow-inner`}>
                <Icon className="w-7 h-7" />
            </div>
            <p className="text-lg font-medium text-gray-600">{title}</p>
            <p className="text-4xl font-extrabold text-gray-800">{value}</p>
        </div>
    );

    const RisksSummary = () => {
        const highRisks = plan.risks
          .filter(r => r.severity >= 4)
          .sort((a, b) => b.severity - a.severity)
          .slice(0, 3);
    
        return (
          <div className="bg-white p-6 rounded-2xl shadow-xl border-t-4 border-red-400">
            <h3 className="text-xl font-bold text-red-600 mb-4 flex items-center pb-2">
              <AlertTriangle className="w-5 h-5 mr-2" />
              Critical Risks ({highRisks.length})
            </h3>
            {highRisks.length > 0 ? (
              <ul className="space-y-3">
                {highRisks.map(r => (
                  <li key={r.id} className="bg-red-50 p-3 rounded-lg border-l-4 border-red-400 flex justify-between items-center text-sm">
                    <span className="font-semibold text-gray-800 truncate">{r.name}</span>
                    <span className="text-red-600 font-bold ml-2 shrink-0">Sev: {r.severity}/5</span>
                  </li>
                ))}
              </ul>
            ) : (
              <p className="text-gray-500 italic text-sm">No critical risks identified.</p>
            )}
          </div>
        );
    };

    const ActionsSummary = () => {
        const incompleteActions = plan.actions
          .filter(a => a.status !== 'Completed')
          .sort((a, b) => {
            const priorityOrder = { 'High': 3, 'Medium': 2, 'Low': 1 };
            return priorityOrder[b.priority] - priorityOrder[a.priority];
          })
          .slice(0, 3);
    
        return (
          <div className="bg-white p-6 rounded-2xl shadow-xl border-t-4 border-indigo-400">
            <h3 className="text-xl font-bold text-indigo-600 mb-4 flex items-center pb-2">
              <Clock className="w-5 h-5 mr-2" />
              Next Priority Actions ({incompleteActions.length})
            </h3>
            {incompleteActions.length > 0 ? (
              <ul className="space-y-3">
                {incompleteActions.map(a => (
                  <li key={a.id} className="bg-indigo-50 p-3 rounded-lg border-l-4 border-indigo-400 text-sm">
                    <div className="font-semibold text-gray-800 truncate">{a.description}</div>
                    <div className="text-xs text-gray-600 mt-1 flex items-center space-x-2">
                        <PriorityBadge priority={a.priority} />
                        <span>Lead: {a.lead || 'N/A'}</span>
                    </div>
                  </li>
                ))}
              </ul>
            ) : (
              <p className="text-gray-500 italic text-sm">All pending actions are completed!</p>
            )}
          </div>
        );
    };
    
    return (
        <div className="space-y-8">
            <h2 className="text-3xl font-bold text-gray-800 border-b-4 border-indigo-200 pb-3 mb-6">
                <Activity className="w-7 h-7 inline mr-2 text-indigo-500" />
                {plan.communityName} - Resilience Overview
            </h2>

            {/* Risk Gap Alert */}
            <RiskGapAlerts riskGaps={resilienceMetrics.riskGaps} setView={setView} />

            {/* Resilience Score Card */}
            <div className="bg-white p-8 rounded-2xl shadow-2xl border-l-8 border-green-500">
                <div className="flex flex-col md:flex-row justify-between items-center">
                    <div className="mb-4 md:mb-0">
                        <h3 className="text-2xl font-semibold text-gray-700 flex items-center">
                            <Shield className="w-6 h-6 mr-2 text-green-600" />
                            Overall Resilience Progress
                        </h3>
                        <p className="text-lg text-gray-500 mt-1">
                            Tracking operational readiness across {resilienceMetrics.totalActions} key actions.
                        </p>
                    </div>
                    <div className="flex items-center space-x-4">
                        <div className="relative w-24 h-24">
                            <svg className="w-full h-full" viewBox="0 0 100 100">
                                <circle className="text-gray-200 stroke-current" strokeWidth="10" cx="50" cy="50" r="45" fill="transparent"></circle>
                                <circle 
                                    className="text-green-500 stroke-current transition-all duration-1000 ease-out" 
                                    strokeWidth="10" 
                                    strokeLinecap="round"
                                    cx="50" 
                                    cy="50" 
                                    r="45" 
                                    fill="transparent" 
                                    strokeDasharray={283} 
                                    strokeDashoffset={283 - (resilienceMetrics.percentage / 100) * 283}
                                    transform="rotate(-90 50 50)"
                                ></circle>
                                <text x="50" y="55" fill="#10B981" textAnchor="middle" dominantBaseline="middle" className="text-xl font-extrabold">{resilienceMetrics.percentage}%</text>
                            </svg>
                        </div>
                    </div>
                </div>
                <div className="text-sm text-gray-500 mt-4 text-center">
                    {resilienceMetrics.completedActions} of {resilienceMetrics.totalActions} actions completed.
                </div>
            </div>

            {/* Stats Grid */}
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                <StatCard Icon={Zap} title="Identified Risks" value={resilienceMetrics.totalRisks} color="bg-red-50" iconColor="text-red-500" />
                <StatCard Icon={ListChecks} title="Resilience Actions" value={resilienceMetrics.totalActions} color="bg-indigo-50" iconColor="text-indigo-500" />
                <StatCard Icon={CheckCircle} title="Actions Completed" value={resilienceMetrics.completedActions} color="bg-green-50" iconColor="text-green-500" />
            </div>

            {/* Priority Risks & Actions */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <RisksSummary />
                <ActionsSummary />
            </div>
        </div>
    );
};


const RiskAssessmentView = () => {
    const { plan, savePlan, loading, generateRiskSuggestions } = useResilience();
    const [isAdding, setIsAdding] = useState(false);
    const [isGenerating, setIsGenerating] = useState(false);
    const [aiSuggestions, setAiSuggestions] = useState([]);
    const [aiError, setAiError] = useState(null);
    
    // Risk Form State (managed locally)
    const [newRisk, setNewRisk] = useState({ name: '', type: 'Natural Hazard', severity: 3, description: '' });

    const handleFormChange = (e) => {
        const { name, value } = e.target;
        setNewRisk(prev => ({ ...prev, [name]: name === 'severity' ? parseInt(value) : value }));
    };

    const handleAddRisk = (riskData) => {
        const risk = riskData || newRisk;

        if (!risk.name || risk.severity < 1) {
            console.error("Risk name and severity are required.");
            return;
        }
        const riskToAdd = { 
            ...risk, 
            id: generateId(), 
            severity: parseInt(risk.severity, 10),
            type: risk.type || 'Other Risk' // Ensure type is present
        };
        const updatedPlan = { ...plan, risks: [...plan.risks, riskToAdd] };
        savePlan(updatedPlan);
        
        // If this was a manual addition, clear the form
        if (!riskData) {
            setNewRisk({ name: '', type: 'Natural Hazard', severity: 3, description: '' });
            setIsAdding(false);
        }
    };

    const handleDelete = (id) => {
        const updatedRisks = plan.risks.filter(r => r.id !== id);
        // Also remove any actions tied to this risk
        const updatedActions = plan.actions.map(a => 
            a.relatedRisk === id ? { ...a, relatedRisk: '' } : a
        );
        savePlan({ ...plan, risks: updatedRisks, actions: updatedActions });
    };

    const handleGenerateRisks = async () => {
        setIsGenerating(true);
        setAiSuggestions([]);
        setAiError(null);
        try {
            const suggestions = await generateRiskSuggestions(plan.communityName);
            // Filter out suggestions that are already in the plan (by name match)
            const existingNames = new Set(plan.risks.map(r => r.name.toLowerCase()));
            const newSuggestions = suggestions.filter(s => !existingNames.has(s.name.toLowerCase()));
            setAiSuggestions(newSuggestions);
        } catch (e) {
            setAiError("Failed to generate suggestions. Check console for API errors.");
        } finally {
            setIsGenerating(false);
        }
    };
    
    const handleAddSuggestion = (suggestion) => {
        handleAddRisk(suggestion); // Add the suggestion to the plan
        setAiSuggestions(prev => prev.filter(s => s.id !== suggestion.id)); // Remove from suggestion list
    };

    const sortedRisks = [...plan.risks].sort((a, b) => b.severity - a.severity);

    return (
        <div className="space-y-8">
            <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center border-b-4 border-red-200 pb-3 mb-6">
                <h2 className="text-3xl font-bold text-gray-800 flex items-center mb-4 sm:mb-0">
                    <AlertTriangle className="w-7 h-7 mr-2 text-red-500" />
                    Community Risk Assessment
                </h2>
                <div className="flex space-x-3">
                    <button
                        onClick={handleGenerateRisks}
                        disabled={isGenerating}
                        className="bg-indigo-600 text-white font-semibold py-2 px-4 rounded-xl shadow-md hover:bg-indigo-700 transition flex items-center disabled:bg-indigo-400"
                    >
                        {isGenerating ? (
                            <Loader2 className="animate-spin w-5 h-5 mr-2" />
                        ) : (
                            <><Brain className="w-5 h-5 mr-2" /> AI Suggest Risks</>
                        )}
                    </button>
                    <button
                        onClick={() => { setIsAdding(!isAdding); setAiSuggestions([]); }}
                        className="bg-red-500 text-white font-semibold py-2 px-4 rounded-xl shadow-md hover:bg-red-600 transition flex items-center"
                    >
                        <PlusCircle className="w-5 h-5 mr-2" />
                        {isAdding ? 'Close Form' : 'Add New Risk'}
                    </button>
                </div>
            </div>
            
            {/* AI Suggestions Section */}
            {(isGenerating || aiSuggestions.length > 0 || aiError) && (
                <div className="bg-blue-50 p-6 rounded-2xl shadow-xl border-t-4 border-blue-500">
                    <h3 className="text-xl font-semibold text-blue-700 mb-4 flex items-center">
                        <Brain className="w-5 h-5 mr-2" /> AI Risk Suggestions for "{plan.communityName}"
                    </h3>
                    
                    {isGenerating && <LoadingSpinner />}

                    {aiError && <p className="text-red-500">{aiError}</p>}
                    
                    {aiSuggestions.length > 0 && (
                        <div className="space-y-4">
                            {aiSuggestions.map((risk, index) => (
                                <div key={risk.name + index} className="p-3 bg-white rounded-lg border border-blue-200 flex justify-between items-center">
                                    <div className="flex-grow space-y-1">
                                        <p className="font-bold text-gray-800">{risk.name} 
                                            <span className="ml-2 px-2 py-0.5 text-xs font-medium bg-gray-100 text-gray-600 rounded-full">{risk.type}</span>
                                        </p>
                                        <p className="text-sm text-gray-600">{risk.description}</p>
                                    </div>
                                    <button 
                                        onClick={() => handleAddSuggestion({ ...risk, id: generateId() })}
                                        className="ml-4 flex-shrink-0 bg-blue-500 text-white text-sm py-1.5 px-3 rounded-full hover:bg-blue-600 transition"
                                    >
                                        Add (Sev: {risk.severity})
                                    </button>
                                </div>
                            ))}
                        </div>
                    )}
                </div>
            )}
            
            {/* Add New Risk Form (Toggled) */}
            {isAdding && (
                <div className="bg-white p-6 rounded-2xl shadow-xl border-t-4 border-red-500 transition duration-300">
                    <h3 className="text-xl font-semibold text-gray-700 mb-4">Manual Risk Details</h3>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <input type="text" name="name" value={newRisk.name} onChange={handleFormChange} placeholder="Risk Name (e.g., Wildfire Threat)" 
                            className="w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:ring-red-500 focus:border-red-500" />
                        
                        <select name="type" value={newRisk.type} onChange={handleFormChange} className="w-full p-3 border border-gray-300 rounded-lg shadow-sm bg-white">
                            <option>Natural Hazard</option>
                            <option>Socio-Economic</option>
                            <option>Infrastructure Failure</option>
                            <option>Health Crisis</option>
                            <option>Other Risk</option>
                        </select>
                        
                        <div>
                            <label className="block text-xs font-medium text-gray-500 mb-1">Severity (1-5): <span className="font-bold text-red-600">{newRisk.severity}</span></label>
                            <input type="range" name="severity" min="1" max="5" step="1" value={newRisk.severity} onChange={handleFormChange}
                                className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-red-500" />
                        </div>
                        
                        <div className="md:col-span-3">
                            <textarea name="description" value={newRisk.description} onChange={handleFormChange} rows="2" placeholder="Describe the risk and its potential impact."
                                className="w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:ring-red-500 focus:border-red-500"></textarea>
                        </div>
                    </div>
                    <button onClick={() => handleAddRisk()} disabled={loading}
                        className="mt-4 bg-red-600 text-white font-semibold py-2 px-4 rounded-xl hover:bg-red-700 transition shadow-lg disabled:bg-red-400 flex items-center justify-center">
                        {loading ? <Loader2 className="animate-spin w-5 h-5 mr-2" /> : 'Confirm Risk Addition'}
                    </button>
                </div>
            )}

            {/* Risk List */}
            <div className="bg-white p-6 rounded-2xl shadow-xl">
                <h3 className="text-xl font-bold text-gray-700 mb-4 border-b pb-2">Risk Inventory ({plan.risks.length})</h3>
                <div className="space-y-4">
                    {sortedRisks.map((risk) => (
                        <div key={risk.id} className={`p-4 rounded-xl border border-gray-200 shadow-sm flex justify-between items-center transition hover:shadow-lg ${
                            risk.severity >= 4 ? 'bg-red-50 border-red-300' : risk.severity === 3 ? 'bg-yellow-50 border-yellow-300' : 'bg-green-50 border-green-300'
                        }`}>
                            <div className="flex-grow space-y-1">
                                <p className="text-lg font-bold text-gray-800 flex items-center">
                                    {risk.name}
                                    <span className="ml-3 px-2 py-0.5 text-xs font-medium bg-gray-100 text-gray-600 rounded-full">{risk.type}</span>
                                </p>
                                <p className="text-sm text-gray-600 italic">{risk.description || 'No description provided.'}</p>
                                <div className="flex items-center space-x-2 text-sm mt-1">
                                    <span className="font-semibold text-red-700">Severity: {risk.severity}/5</span>
                                </div>
                            </div>
                            <button 
                                onClick={() => handleDelete(risk.id)}
                                className="ml-4 text-red-500 hover:text-red-700 transition p-2 rounded-full hover:bg-red-100"
                                title="Delete Risk">
                                <Trash2 className="w-5 h-5" />
                            </button>
                        </div>
                    ))}
                </div>
                {plan.risks.length === 0 && !isGenerating && (
                    <p className="text-gray-500 italic text-center p-4">No risks defined yet. Start by generating suggestions or adding one manually!</p>
                )}
            </div>
        </div>
    );
};

const PriorityBadge = ({ priority }) => {
    let classes = '';
    if (priority === 'High') classes = 'bg-red-200 text-red-800';
    else if (priority === 'Medium') classes = 'bg-yellow-200 text-yellow-800';
    else classes = 'bg-green-200 text-green-800';
    
    return <span className={`px-2 py-0.5 rounded-full text-xs font-semibold ${classes}`}>{priority}</span>;
};

const StatusBadge = ({ status }) => {
    let classes = '';
    if (status === 'Completed') classes = 'bg-green-500 text-white';
    else if (status === 'In Progress') classes = 'bg-yellow-500 text-gray-800';
    else classes = 'bg-gray-400 text-white';

    return <span className={`px-2 py-0.5 rounded-full text-xs font-semibold ${classes}`}>{status}</span>;
};

const ActionPlanningView = () => {
    const { plan, savePlan, loading } = useResilience();
    const [isAdding, setIsAdding] = useState(false);
    
    // Action Form State (managed locally)
    const [newAction, setNewAction] = useState({ description: '', priority: 'Medium', lead: '', dueDate: '', relatedRisk: '' });

    const handleFormChange = (e) => {
        const { name, value } = e.target;
        setNewAction(prev => ({ ...prev, [name]: value }));
    };

    const handleAddAction = () => {
        if (!newAction.description || !newAction.lead) {
            console.error("Action description and lead are required.");
            return;
        }
        const actionToAdd = { ...newAction, id: generateId(), status: 'Pending' };
        const updatedPlan = { ...plan, actions: [...plan.actions, actionToAdd] };
        savePlan(updatedPlan);
        setNewAction({ description: '', priority: 'Medium', lead: '', dueDate: '', relatedRisk: '' });
        setIsAdding(false);
    };

    const handleStatusUpdate = (id, newStatus) => {
        const updatedActions = plan.actions.map(a => 
            a.id === id ? { ...a, status: newStatus, completionDate: newStatus === 'Completed' ? new Date().toISOString() : null } : a
        );
        savePlan({ ...plan, actions: updatedActions });
    };

    const handleDelete = (id) => {
        const updatedActions = plan.actions.filter(a => a.id !== id);
        savePlan({ ...plan, actions: updatedActions });
    };

    const sortedActions = [...plan.actions].sort((a, b) => {
        // Sort by status (Pending/In Progress first), then by Priority (High first)
        const statusOrder = { 'Pending': 3, 'In Progress': 2, 'Completed': 1 };
        const priorityOrder = { 'High': 3, 'Medium': 2, 'Low': 1 };
        return statusOrder[b.status] - statusOrder[a.status] || priorityOrder[b.priority] - priorityOrder[a.priority];
    });

    return (
        <div className="space-y-8">
            <div className="flex justify-between items-center border-b-4 border-indigo-200 pb-3 mb-6">
                <h2 className="text-3xl font-bold text-gray-800 flex items-center">
                    <ListChecks className="w-7 h-7 mr-2 text-indigo-500" />
                    Action Planning & Tracker
                </h2>
                <button
                    onClick={() => setIsAdding(!isAdding)}
                    className="bg-indigo-500 text-white font-semibold py-2 px-4 rounded-xl shadow-md hover:bg-indigo-600 transition flex items-center"
                >
                    <PlusCircle className="w-5 h-5 mr-2" />
                    {isAdding ? 'Close Form' : 'Add New Action'}
                </button>
            </div>
            
            {/* Add New Action Form (Toggled) */}
            {isAdding && (
                <div className="bg-white p-6 rounded-2xl shadow-xl border-t-4 border-indigo-500 transition duration-300">
                    <h3 className="text-xl font-semibold text-gray-700 mb-4">Action Details</h3>
                    <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                        <div className="md:col-span-4">
                            <input type="text" name="description" value={newAction.description} onChange={handleFormChange} placeholder="Action Description (e.g., Update emergency contact list)" 
                                className="w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500" />
                        </div>
                        <select name="priority" value={newAction.priority} onChange={handleFormChange} className="w-full p-3 border border-gray-300 rounded-lg shadow-sm bg-white">
                            <option>High</option>
                            <option>Medium</option>
                            <option>Low</option>
                        </select>
                        <input type="text" name="lead" value={newAction.lead} onChange={handleFormChange} placeholder="Lead Person/Team" 
                            className="w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500" />
                        <input type="date" name="dueDate" value={newAction.dueDate} onChange={handleFormChange} 
                            className="w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500" />
                        <select name="relatedRisk" value={newAction.relatedRisk} onChange={handleFormChange} className="w-full p-3 border border-gray-300 rounded-lg shadow-sm bg-white">
                            <option value="">(No Related Risk)</option>
                            {plan.risks.map(r => (
                                <option key={r.id} value={r.id}>{r.name} (Sev: {r.severity})</option>
                            ))}
                        </select>
                    </div>
                    <button onClick={handleAddAction} disabled={loading}
                        className="mt-6 bg-indigo-600 text-white font-semibold py-2 px-4 rounded-xl hover:bg-indigo-700 transition shadow-lg disabled:bg-indigo-400 flex items-center justify-center">
                        {loading ? <Loader2 className="animate-spin w-5 h-5 mr-2" /> : 'Confirm Action Addition'}
                    </button>
                </div>
            )}

            {/* Action List */}
            <div className="bg-white p-6 rounded-2xl shadow-xl">
                <h3 className="text-xl font-bold text-gray-700 mb-4 border-b pb-2">Action Tracker ({plan.actions.length})</h3>
                <div className="space-y-4">
                    {sortedActions.map((action) => {
                        const relatedRisk = plan.risks.find(r => r.id === action.relatedRisk);
                        return (
                            <div key={action.id} className={`p-4 rounded-xl border-l-8 shadow-md transition hover:shadow-lg ${
                                action.status === 'Completed' ? 'border-green-500 bg-green-50' : 
                                action.status === 'In Progress' ? 'border-yellow-500 bg-yellow-50' : 
                                'border-gray-400 bg-gray-50'
                            }`}>
                                <div className="flex justify-between items-start">
                                    <p className="font-semibold text-lg text-gray-800">{action.description}</p>
                                    <button 
                                        onClick={() => handleDelete(action.id)}
                                        className="ml-4 text-red-500 hover:text-red-700 transition p-2 rounded-full hover:bg-red-100"
                                        title="Delete Action">
                                        <Trash2 className="w-5 h-5" />
                                    </button>
                                </div>
                                
                                <div className="flex flex-wrap items-center mt-2 text-sm space-x-3">
                                    <StatusBadge status={action.status} />
                                    <PriorityBadge priority={action.priority} />
                                    <span className="text-gray-600">Lead: <span className='font-medium'>{action.lead || 'N/A'}</span></span>
                                    <span className="text-gray-600">Due: <span className='font-medium'>{action.dueDate || 'N/A'}</span></span>
                                </div>

                                {relatedRisk && (
                                    <p className="text-xs text-gray-500 mt-2">
                                        Mitigates Risk: <span className='font-semibold'>{relatedRisk.name}</span> (Severity {relatedRisk.severity})
                                    </p>
                                )}

                                <div className="mt-3 pt-3 border-t border-gray-200 flex items-center">
                                    <label className="text-sm font-medium text-gray-700 mr-3">Update Status:</label>
                                    <select 
                                        value={action.status} 
                                        onChange={(e) => handleStatusUpdate(action.id, e.target.value)}
                                        className="p-1.5 border border-gray-300 rounded-lg bg-white text-sm shadow-sm"
                                        disabled={loading}
                                    >
                                        <option>Pending</option>
                                        <option>In Progress</option>
                                        <option>Completed</option>
                                    </select>
                                </div>
                            </div>
                        );
                    })}
                </div>
            </div>
        </div>
    );
};

// --- 4. Main App Component ---

const App = () => {
    const { plan, loading, error, userId, savePlan, dbReady } = useResilience();
    const [view, setView] = useState('dashboard');
    const [showSetupModal, setShowSetupModal] = useState(false);

    // Show setup modal when DB is ready and plan is null
    useEffect(() => {
        if (dbReady && plan === null && !loading) {
            setShowSetupModal(true);
        }
    }, [dbReady, plan, loading]);

    const handlePlanSetup = async (name) => {
        setShowSetupModal(false);
        const newPlan = { 
            ...DEFAULT_PLAN, 
            communityName: name,
            creationDate: new Date().toISOString(),
        };
        // Save the initial plan. Context listener will update state.
        await savePlan(newPlan);
        setView('dashboard');
    };

    if (error) {
        return (
            <div className="min-h-screen bg-red-100 p-8 text-red-800">
                <h1 className="text-xl font-bold mb-4">Application Error</h1>
                <p>{error}</p>
                <p className="mt-4 text-sm">A critical issue occurred during initialization or synchronization. Please check the console.</p>
            </div>
        );
    }

    if (loading || !dbReady) {
        return (
            <div className="min-h-screen bg-gray-50 p-4">
                <LoadingSpinner />
            </div>
        );
    }

    if (!plan && showSetupModal) {
        return <PlanSetupModal onSetup={handlePlanSetup} userId={userId} />;
    }
    
    // Safety check: ensure plan is defined before rendering core components
    if (!plan) {
        return (
            <div className="min-h-screen bg-gray-50 p-4">
                <LoadingSpinner />
            </div>
        );
    }
    
    // If we reach here, plan MUST be defined.

    return (
        <div className="min-h-screen bg-gray-50 font-sans pb-12"> {/* Added pb-12 for footer clearance */}
            <Header view={view} setView={setView} />
            <main className="max-w-7xl mx-auto py-8 sm:px-6 lg:px-8">
                <div className="px-4 sm:px-0">
                    {view === 'dashboard' && <DashboardView setView={setView} />}
                    {view === 'risks' && <RiskAssessmentView />}
                    {view === 'actions' && <ActionPlanningView />}
                </div>
            </main>

            {/* Footer / Status Bar - Safely accessing plan properties */}
            <footer className="fixed bottom-0 left-0 right-0 bg-gray-800 text-white text-sm p-3 flex justify-between items-center z-10 shadow-lg">
                <span className="flex items-center">
                    <Users className="w-4 h-4 inline mr-2 text-indigo-300" />
                    Community Plan: <span className="font-semibold ml-1">{plan?.communityName || 'Plan Loading'}</span>
                </span>
                <span className="text-xs text-gray-400">
                    App ID: {appId} | User ID: {userId ? `${userId.substring(0, 8)}...` : 'N/A'}
                </span>
                {loading ? (
                    <span className="flex items-center text-yellow-400 font-medium">
                        <Loader2 className="animate-spin w-4 h-4 mr-1" /> Saving...
                    </span>
                ) : (
                    <span className="text-green-400 flex items-center font-medium">
                        <CheckCircle className="w-4 h-4 mr-1" /> Synced
                    </span>
                )}
            </footer>
        </div>
    );
};

const Root = () => (
    <ResilienceProvider>
        <App />
    </ResilienceProvider>
);

export default Root;
